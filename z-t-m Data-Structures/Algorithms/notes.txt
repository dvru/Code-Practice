///////What are Algorithms?
     Steps in a process we take to perform a desired action with computers

Data Structures + Algorithms = Programs
Class {} + function() = Programs

Types of Algorithms:
                    Sorting
                        Dynamic Programming
                            Searching + BFS + DFS
                                Recursion


/////Recursion:
Every Recursive function needs to have a base case/stop point
    
1. Identify the base case
2. Identify the Recursive case
3. Get closer and closer and return when needed.
    usuaally 2 return for base case and Recursive case

~~~Anything you do with a Recursion CAN be done iteratively (loop)


/////// NEW RULE!

Everytime you are using a tree or converting something into a tree, 
consider recursion:
1. Divided into a number of subproblem that are smaller instances of the same problem.
2. Each instance of the subproblem is identical in nature.
3. The solutions of each subproblem can be combined to solve the problem at hand.

DIVIDE AND CONQUER USING Recursion


/// Sorting
-
Bubble Sort
Insertion Sort
Selection Sort
-
Merge Sort
Quick Sort


Stable Sorting Algorithms:

                Insertion Sort
                Merge Sort
                Bubble Sort
                Tim Sort
                Counting Sort
                Block Sort
                Quadsort
                Library Sort
                Cocktail shaker Sort
                Gnome Sort
                Oddâ€“even Sort

Unstable Sorting Algorithms:

                Heap sort
                Selection sort
                Shell sort
                Quick sort
                Introsort (subject to Quicksort)
                Tree sort
                Cycle sort
                Smoothsort
                Tournament sort(subject to Hesapsort)